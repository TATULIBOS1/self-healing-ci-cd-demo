name: AI-Powered Self-Healing CI/CD

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      S3_BUCKET: ci-cd-demo-logs
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install flask pytest boto3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run tests with detailed logging
        id: run-tests
        run: |
          pytest --junitxml=test-results.xml -v > test_logs.txt 2>&1 || true
          grep -E 'FAILED|ERROR' test_logs.txt > failure_summary.txt || echo "No failures detected" > failure_summary.txt
          if grep -q 'FAILED\|ERROR' test_logs.txt; then
            echo "tests_failed=true" >> $GITHUB_ENV
          else
            echo "tests_failed=false" >> $GITHUB_ENV
          fi

      - name: Set timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      - name: Upload artifacts to S3
        if: env.tests_failed == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          S3_BUCKET: ${{ env.S3_BUCKET }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
        run: |
          aws s3 cp test_logs.txt s3://$S3_BUCKET/$GITHUB_RUN_ID/$TIMESTAMP/full_logs.txt
          aws s3 cp failure_summary.txt s3://$S3_BUCKET/$GITHUB_RUN_ID/$TIMESTAMP/failure_summary.txt
          aws s3 cp test-results.xml s3://$S3_BUCKET/$GITHUB_RUN_ID/$TIMESTAMP/test_results.xml

      - name: Trigger AI Analysis
        if: env.tests_failed == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          S3_BUCKET: ${{ env.S3_BUCKET }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
          SFN_ARN: ${{ secrets.SFN_SELF_HEALING_ARN }}
        run: |
          if [ -z "$SFN_ARN" ] || [ "$SFN_ARN" = "***" ]; then
            echo "Error: SFN_SELF_HEALING_ARN is empty or invalid. Please set it in GitHub secrets."
            exit 1
          fi
          EXECUTION_NAME="github-$GITHUB_RUN_ID-$(date +%s)"
          INPUT="{\"s3_bucket\":\"$S3_BUCKET\",\"s3_prefix\":\"$GITHUB_RUN_ID/$TIMESTAMP\",\"github_run_id\":\"$GITHUB_RUN_ID\"}"
          RESPONSE=$(aws stepfunctions start-execution \
            --state-machine-arn "$SFN_ARN" \
            --name "$EXECUTION_NAME" \
            --input "$INPUT")
          echo "$RESPONSE"
          EXECUTION_ARN=$(echo $RESPONSE | jq -r '.executionArn')
          echo "EXECUTION_ARN=$EXECUTION_ARN" >> $GITHUB_ENV

      - name: Wait for analysis completion
        if: env.tests_failed == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          EXECUTION_ARN: ${{ env.EXECUTION_ARN }}
        run: |
          for i in {1..12}; do
            STATUS=$(aws stepfunctions describe-execution \
              --execution-arn "$EXECUTION_ARN" \
              --query 'status' --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" = "SUCCEEDED" ]; then
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Analysis failed"
              exit 1
            fi
            sleep 10
          done

      - name: Show remediation plan
        if: env.tests_failed == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          EXECUTION_ARN: ${{ env.EXECUTION_ARN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          OUTPUT=$(aws stepfunctions describe-execution \
            --execution-arn "$EXECUTION_ARN" \
            --query 'output' --output text)
          echo "=== AI Remediation Plan ==="
          echo $OUTPUT | jq -r '.recommendations' || echo "No recommendations generated"
          echo "========================="
          if echo $OUTPUT | jq -e '.failure_type == "CRITICAL"'; then
            echo "$OUTPUT" | jq -r '.recommendations' > issue_body.txt
            gh issue create \
              --title "Critical CI Failure in $GITHUB_SHA" \
              --body-file issue_body.txt \
              --label "bug,ci-failure"
          fi
