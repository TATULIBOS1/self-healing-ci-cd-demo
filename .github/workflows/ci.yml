name: AI-Powered Self-Healing CI/CD

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flask pytest boto3 awscli jq
          aws --version
          jq --version

      - name: Run tests with detailed logging
        id: run-tests
        run: |
          pytest --junitxml=test-results.xml -v > test_logs.txt 2>&1 || true
          echo "=== Test Logs ==="
          cat test_logs.txt
          # Extract failure details, case-insensitive
          grep -i -E 'fail|error|exception|assert' test_logs.txt > failure_summary.txt || echo "No failure details found" > failure_summary.txt
          echo "=== Failure Summary ==="
          cat failure_summary.txt
          # Fail the step if tests failed
          if grep -q -i -E 'fail|error|exception|assert' test_logs.txt; then
            exit 1
          fi

      - name: Verify AWS credentials
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws sts get-caller-identity || { echo "AWS credentials invalid"; exit 1; }
          aws s3 ls s3://ci-cd-demo-logs || { echo "Cannot access S3 bucket"; exit 1; }

      - name: Upload artifacts to S3
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "Uploading to s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/"
          aws s3 cp test_logs.txt s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/full_logs.txt || echo "Failed to upload test_logs.txt"
          aws s3 cp failure_summary.txt s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/failure_summary.txt || echo "Failed to upload failure_summary.txt"
          aws s3 cp test-results.xml s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/test_results.xml || echo "Failed to upload test-results.xml"
          aws s3 ls s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/ || echo "Failed to list S3 uploads"

      - name: Trigger AI Analysis
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          S3_PREFIX: $GITHUB_RUN_ID/$TIMESTAMP
          SFN_ARN: ${{ secrets.SFN_SELF_HEALING_ARN }}
        run: |
          echo "Using SFN ARN: ${SFN_ARN:0:20}..."
          if [ -z "$SFN_ARN" ] || [ "$SFN_ARN" = "***" ]; then
            echo "Error: SFN_SELF_HEALING_ARN is empty or invalid. Set it to arn:aws:states:us-east-1:<ACCOUNT_ID>:stateMachine:SelfHealingOrchestrator"
            exit 1
          fi
          EXECUTION_NAME="github-$GITHUB_RUN_ID-$(date +%s)"
          RESPONSE=$(aws stepfunctions start-execution \
            --state-machine-arn "$SFN_ARN" \
            --name "$EXECUTION_NAME" \
            --input "{\"s3_bucket\":\"ci-cd-demo-logs\",\"s3_prefix\":\"$S3_PREFIX\",\"github_run_id\":\"$GITHUB_RUN_ID\"}" 2>&1)
          if [ $? -ne 0 ]; then
            echo "Step Functions trigger failed: $RESPONSE"
            exit 1
          fi
          echo "SFN Execution ARN: $(echo $RESPONSE | jq -r '.executionArn')"
          echo "SFN_RESPONSE=$RESPONSE" >> $GITHUB_ENV

      - name: Wait for analysis completion
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          if [ -z "$SFN_RESPONSE" ]; then
            echo "Error: No Step Functions execution ARN available."
            exit 1
          fi
          EXECUTION_ARN=$(echo $SFN_RESPONSE | jq -r '.executionArn')
          echo "Polling execution: $EXECUTION_ARN"
          for i in {1..12}; do
            STATUS=$(aws stepfunctions describe-execution \
              --execution-arn "$EXECUTION_ARN" \
              --query 'status' --output text 2>&1)
            if [ $? -ne 0 ]; then
              echo "Error checking status: $STATUS"
              exit 1
            fi
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "Analysis completed successfully"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Analysis failed"
              exit 1
            fi
            sleep 10
          done

      - name: Show remediation plan
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$SFN_RESPONSE" ]; then
            echo "Error: No Step Functions execution ARN available."
            exit 1
          fi
          EXECUTION_ARN=$(echo $SFN_RESPONSE | jq -r '.executionArn')
          OUTPUT=$(aws stepfunctions describe-execution \
            --execution-arn "$EXECUTION_ARN" \
            --query 'output' --output text 2>&1)
          if [ $? -ne 0 ]; then
            echo "Error retrieving output: $OUTPUT"
            exit 1
          fi
          echo "=== AI Remediation Plan ==="
          echo $OUTPUT | jq -r '.body | fromjson | .recommendations' || echo "No recommendations generated"
          echo "========================="
          if echo $OUTPUT | jq -e '.body | fromjson | .failure_type == "CRITICAL"'; then
            echo "$OUTPUT" | jq -r '.body | fromjson | .recommendations' > issue_body.txt
            gh issue create \
              --title "Critical CI Failure in $GITHUB_SHA" \
              --body-file issue_body.txt \
              --label "bug,ci-failure" \
              --repo $GITHUB_REPOSITORY || echo "Failed to create GitHub issue"
          fi
