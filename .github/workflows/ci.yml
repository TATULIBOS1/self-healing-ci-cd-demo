name: AI-Powered Self-Healing CI/CD

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install flask pytest boto3

      - name: Run tests with detailed logging
        id: run-tests
        run: |
          pytest --junitxml=test-results.xml -v > test_logs.txt 2>&1 || true
          grep -E 'FAILED|ERROR' test_logs.txt > failure_summary.txt || echo "No failures detected" > failure_summary.txt
        continue-on-error: true

      - name: Upload artifacts to S3
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          aws s3 cp test_logs.txt s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/full_logs.txt || true
          aws s3 cp failure_summary.txt s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/failure_summary.txt || true
          aws s3 cp test-results.xml s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/test_results.xml || true

      - name: Trigger AI Analysis via Step Functions
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          SFN_ARN: ${{ secrets.SFN_SELF_HEALING_ARN }}
        run: |
          EXECUTION_NAME="github-$GITHUB_RUN_ID-$(date +%s)"
          RESPONSE=$(aws stepfunctions start-execution \
            --state-machine-arn "$SFN_ARN" \
            --name "$EXECUTION_NAME" \
            --input "{\"s3_bucket\":\"ci-cd-demo-logs\",\"s3_prefix\":\"$GITHUB_RUN_ID/$TIMESTAMP\",\"github_run_id\":\"$GITHUB_RUN_ID\"}")
          EXECUTION_ARN=$(echo $RESPONSE | jq -r '.executionArn')
          echo "EXECUTION_ARN=$EXECUTION_ARN" >> $GITHUB_ENV

      - name: Wait for analysis completion
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          for i in {1..12}; do
            STATUS=$(aws stepfunctions describe-execution \
              --execution-arn "$EXECUTION_ARN" \
              --query 'status' --output text)
            echo "Step Functions status: $STATUS"
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "Analysis succeeded"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Analysis failed"
              exit 1
            fi
            sleep 10
          done

      - name: Show AI Remediation Plan
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          OUTPUT=$(aws stepfunctions describe-execution \
            --execution-arn "$EXECUTION_ARN" \
            --query 'output' --output text)

          echo "=== AI Remediation Plan ==="
          echo "$OUTPUT" | jq -r '.recommendations' || echo "No recommendations generated"
          echo "==========================="

          if echo "$OUTPUT" | jq -e '.failure_type == "CRITICAL"' > /dev/null; then
            echo "$OUTPUT" | jq -r '.recommendations' > issue_body.txt
            gh issue create \
              --title "ðŸš¨ Critical CI Failure in $GITHUB_SHA" \
              --body-file issue_body.txt \
              --label "bug,ci-failure"
          fi
