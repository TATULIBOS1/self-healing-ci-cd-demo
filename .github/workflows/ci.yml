name: CI/CD Self-Healing Pipeline

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install flask pytest boto3 awscli jq

      - name: Run tests with detailed logging
        id: run_tests
        run: |
          echo "Running pytest..."
          pytest --junitxml=test-results.xml -v > test_logs.txt 2>&1 || true
          echo "Test logs:"
          cat test_logs.txt
          echo "Generating failure summary..."
          grep -E 'FAILED|FAILURE|failure|ERROR|Exception|exception' test_logs.txt > failure_summary.txt || echo "Test failure detected, see test_logs.txt" > failure_summary.txt
          echo "Failure summary:"
          cat failure_summary.txt
          if grep -qE 'FAILED|FAILURE|failure|ERROR|Exception|exception' test_logs.txt; then
            echo "Tests failed, marking job as failed"
            exit 1
          fi

      - name: Validate AWS Credentials and ARN
        if: steps.run_tests.outcome == 'failure'
        run: |
          echo "Checking AWS credentials..."
          if [[ -z "${{ secrets.AWS_ACCESS_KEY }}" || -z "${{ secrets.AWS_SECRET_KEY }}" ]]; then
            echo "Error: AWS credentials missing"
            exit 1
          fi
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}
          export AWS_DEFAULT_REGION=us-east-1
          aws sts get-caller-identity > /tmp/identity.txt 2>&1 || { echo "Error: Invalid AWS credentials"; cat /tmp/identity.txt; exit 1; }
          echo "Credentials valid, user: $(cat /tmp/identity.txt | jq -r '.Arn')"
          echo "Checking Step Functions ARN..."
          if [[ -z "${{ secrets.SFN_SELF_HEALING_ARN }}" || "${{ secrets.SFN_SELF_HEALING_ARN }}" == "***" ]]; then
            echo "Error: SFN_SELF_HEALING_ARN missing or invalid"
            exit 1
          fi
          aws stepfunctions describe-state-machine --state-machine-arn "${{ secrets.SFN_SELF_HEALING_ARN }}" > /tmp/sfn.txt 2>&1 || { echo "Error: Invalid SFN ARN"; cat /tmp/sfn.txt; exit 1; }
          echo "SFN ARN valid: ${{ secrets.SFN_SELF_HEALING_ARN }}"

      - name: Upload artifacts to S3
        if: steps.run_tests.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}
          export AWS_DEFAULT_REGION=us-east-1
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "Files available for upload:"
          ls -l test_logs.txt failure_summary.txt test-results.xml || true
          echo "Uploading to S3..."
          aws s3 cp test_logs.txt s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/full_logs.txt || echo "Warning: Failed to upload full_logs.txt"
          if [ -f failure_summary.txt ]; then
            aws s3 cp failure_summary.txt s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/failure_summary.txt || echo "Warning: Failed to upload failure_summary.txt"
          else
            echo "Warning: failure_summary.txt not found, skipping"
          fi
          if [ -f test-results.xml ]; then
            aws s3 cp test-results.xml s3://ci-cd-demo-logs/$GITHUB_RUN_ID/$TIMESTAMP/test_results.xml || echo "Warning: Failed to upload test_results.xml"
          else
            echo "Warning: test-results.xml not found, skipping"
          fi
          echo "S3_PREFIX=$GITHUB_RUN_ID/$TIMESTAMP" >> $GITHUB_ENV

      - name: Trigger AI Analysis
        if: steps.run_tests.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}
          export AWS_DEFAULT_REGION=us-east-1
          EXECUTION_NAME="github-$GITHUB_RUN_ID-$(date +%s)"
          echo "Starting Step Functions: $EXECUTION_NAME"
          RESPONSE=$(aws stepfunctions start-execution \
            --state-machine-arn "${{ secrets.SFN_SELF_HEALING_ARN }}" \
            --name "$EXECUTION_NAME" \
            --input "{\"s3_bucket\":\"ci-cd-demo-logs\",\"s3_prefix\":\"${{ env.S3_PREFIX }}\",\"github_run_id\":\"$GITHUB_RUN_ID\"}" 2>&1)
          if [ $? -ne 0 ]; then
            echo "Error starting Step Functions: $RESPONSE"
            exit 1
          fi
          echo "SFN Execution ARN: $(echo $RESPONSE | jq -r '.executionArn')"
          echo "SFN_RESPONSE=$RESPONSE" >> $GITHUB_ENV

      - name: Wait for analysis completion
        if: steps.run_tests.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}
          export AWS_DEFAULT_REGION=us-east-1
          EXECUTION_ARN=$(echo "${{ env.SFN_RESPONSE }}" | jq -r '.executionArn')
          if [ -z "$EXECUTION_ARN" ]; then
            echo "Error: No valid execution ARN found"
            exit 1
          fi
          echo "Polling execution: $EXECUTION_ARN"
          for i in {1..12}; do
            STATUS=$(aws stepfunctions describe-execution \
              --execution-arn "$EXECUTION_ARN" \
              --query 'status' --output text 2>&1)
            if [ $? -ne 0 ]; then
              echo "Error checking status: $STATUS"
              exit 1
            fi
            echo "Status: $STATUS"
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "Analysis completed successfully"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Analysis failed"
              exit 1
            fi
            sleep 10
          done

      - name: Show remediation plan
        if: steps.run_tests.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}
          export AWS_DEFAULT_REGION=us-east-1
          EXECUTION_ARN=$(echo "${{ env.SFN_RESPONSE }}" | jq -r '.executionArn')
          OUTPUT=$(aws stepfunctions describe-execution \
            --execution-arn "$EXECUTION_ARN" \
            --query 'output' --output text 2>&1)
          if [ $? -ne 0 ]; then
            echo "Error retrieving output: $OUTPUT"
            exit 1
          fi
          echo "=== AI Remediation Plan ==="
          RECOMMENDATIONS=$(echo "$OUTPUT" | jq -r '.recommendations' || echo "No recommendations generated")
          echo "$RECOMMENDATIONS"
          echo "========================="
          FAILURE_TYPE=$(echo "$OUTPUT" | jq -r '.failure_type')
          if [ "$FAILURE_TYPE" = "CRITICAL" ]; then
            echo "$RECOMMENDATIONS" > issue_body.txt
            gh issue create \
              --title "Critical CI Failure in $GITHUB_SHA" \
              --body-file issue_body.txt \
              --label "bug,ci-failure" \
              --repo ${{ github.repository }} || { echo "Error: Failed to create GitHub issue"; exit 1; }
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
